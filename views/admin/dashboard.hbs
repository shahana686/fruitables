<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Admin Dashboard</title>
  <!-- Bootstrap 5 CDN -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />

  <style>
    body {
      min-height: 100vh;
    }
    .sidebar {
      height: 100vh;
      position: fixed;
      top: 0;
      left: 0;
      width: 220px;
      background-color: #343a40;
      color: white;
    }
    .sidebar a {
      color: #ddd;
      text-decoration: none;
      padding: 10px 20px;
      display: block;
    }
    .sidebar a:hover {
      background-color: #495057;
      color: #fff;
    }
    .main-content {
      margin-left: 220px;
      padding: 2rem;
    }
  </style>
</head>
<body>

  <!-- Sidebar -->
  <div class="sidebar">
    <h3 class="text-center py-3">Admin</h3>
    <a href="/admin/dashboard">Dashboard</a>
    <a href="/admin/products">Products</a>
    <a href="/admin/orders">Orders</a>
    <a href="/admin/users">Users</a>
    <a href="/admin/coupons">coupons</a>
    <a href="/admin/returns">Returns</a>
    <a href="/admin/logout" >Logout</a>
    

  </div>

  <!-- Main Content -->
  <div class="main-content bg-light">
    <h1 class="text-center mb-4">Admin Dashboard</h1>

    <div class="row g-4">
      <div class="col-md-3">
        <div class="card shadow-sm border-0">
          <div class="card-body text-center">
            <h5 class="card-title">Total Users</h5>
            <p class="display-6">{{totalUsers}}</p>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="card shadow-sm border-0">
          <div class="card-body text-center">
            <h5 class="card-title">Total Products</h5>
            <p class="display-6">{{totalProducts}}</p>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="card shadow-sm border-0">
          <div class="card-body text-center">
            <h5 class="card-title">Total Orders</h5>
            <p class="display-6">{{totalOrders}}</p>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="card shadow-sm border-0">
          <div class="card-body text-center">
            <h5 class="card-title">Total Revenue</h5>
            <p class="display-6 text-success">₹{{totalRevenue}}</p>
          </div>
        </div>
      </div>
    </div>
    


<div class="mt-5 shadow p-4 bg-white rounded">
  <!-- Dropdown for time range -->
<select id="revenueRange" class="form-select w-auto mb-3">
  <option value="weekly" selected>Weekly</option>
  <option value="monthly">Monthly</option>
  <option value="yearly">Yearly</option>
</select>
  <h3 class="text-center mb-4"> Revenue Gragh</h3>
  <canvas id="revenueChart" height="100"></canvas>
</div>
 <div class="mt-5 shadow p-4 bg-white rounded" style="width: 400px; height: 500px; margin: auto;">
<h4 class="text-center my-4">Order Distribution by Category</h4>
<canvas id="pieChart" width="200" height="200"></canvas>

</div> 
  </div>


  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>

<script>
  
  const revenueData = {
    weekly: {
      labels: {{{weeklyLabels}}},
      data: {{{weeklyRevenue}}}
    },
    monthly: {
      labels: {{{monthlyLabels}}},
      data: {{{monthlyRevenue}}}
    },
    yearly: {
      labels: {{{yearlyLabels}}},
      data: {{{yearlyRevenue}}}
    }
  };

  const ctx = document.getElementById('revenueChart').getContext('2d');
  let currentChart;

  function renderChart(range) {
    if (currentChart) {
      currentChart.destroy(); // remove old chart
    }

    currentChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: revenueData[range].labels,
        datasets: [{
          label: `Revenue (${range.charAt(0).toUpperCase() + range.slice(1)}) ₹`,
          data: revenueData[range].data,
          backgroundColor: 'rgba(25, 135, 84, 0.6)',
          borderColor: 'rgba(25, 135, 84, 1)',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  }

  // Initial chart
  renderChart('weekly');

  // Handle dropdown change
  document.getElementById('revenueRange').addEventListener('change', function () {
    const selectedRange = this.value;
    renderChart(selectedRange);
  });
</script>

<script>
  const pieCtx = document.getElementById('pieChart').getContext('2d');
  const pieChart = new Chart(pieCtx, {
    type: 'pie',
    data: {
      labels: {{{orderCategories}}}, // ex: ["Fruits", "Vegetables"]
      datasets: [{
        label: 'Orders by Category',
        data: {{{orderCategoryCounts}}}, // ex: [4, 8]
        backgroundColor: [
          '#FF6384',
          '#36A2EB',
          '#FFCE56',
          '#4BC0C0',
          '#9966FF',
          '#FF9F40'
        ]
      }]
    },
    plugins: [ChartDataLabels],  // register plugin
    options: {
      responsive: true,
      plugins: {
        legend: {
          position: 'bottom'
        },
        datalabels: {
          formatter: (value, ctx) => {
            const data = ctx.chart.data.datasets[0].data;
            const total = data.reduce((a, b) => a + b, 0);
            const percentage = ((value / total) * 100).toFixed(1) + "%";
            return ctx.chart.data.labels[ctx.dataIndex] + " (" + percentage + ")";
          },
          color: '#fff',
        }
      }
    }
  });
</script>


</body>
</html>
